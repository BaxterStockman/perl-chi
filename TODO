TO DO

* perl critic
* expires_next => ['hour', 'day']
* class data for defaults, subclassing CHI
* consider supporting key escaping for any drivers that need it, e.g. memcached
* Drivers
  * BerkeleyDB (w/separate file per namespace, must handle locking)
  * DBI or at least mysql
  * Multilevel
* Test:
  * set errors
  * bad driver
  * default settings for $cache object: expires_at, expires_in
* Add logging back
* Put cache version into metadata and check on get

QUESTIONS

* Is there a value to separating out the constructor to CHI->new, and putting everything else in CHI::Driver, other than that it is vaguely DBI-like?
* What should set() return? The value? Success flag? Cache::Cache doesn't seem to specify.
* Should we auto-remove items after a miss, like Cache::Cache? Or is this silly b/c it will probably be followed with a set?
* Should namespace default to caller package?
* What happens if a reference is passed as a key? Stringify reference, or reject, or serialize automatically to a key?
* Should get_namespace() always/sometimes/never report empty namespaces - i.e. namespaces that have been created but not populated, or namespaces that have been cleared?
