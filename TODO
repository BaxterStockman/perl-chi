TO DO

* Three complementary methods: exists, is_valid, exists_and_is_expired
* Run benchmarks on linux for memcached, others
* Look into switching to moose (startup time has been improved)
* perl critic
* Namespace defaults to script name when constructor called from main package?
* expires_next => ['hour', 'day']
* Implement read-only and write-only caches (useful for multilevel caches)
* BerkeleyDB driver (w/separate file per namespace, must handle locking)
* Create faster get_object variant that does not support value - e.g. so file cache can read just metadata - then use this variant for get_expires_at, etc.
* Handle unicode chars in escape_for_filename by utf8 encoding when needed (but how to know when unescaping...)
* DBI driver (at least mysql)
* Test:
  * bad driver
  * default settings for $cache object: expires_at, expires_in
* support key escaping for any drivers that need it, e.g. memcached (via parameter, default on)
* background compute
* Put cache version into metadata and check on get
* Think about different name for multilevel driver (potential confusion with get_multi_*, set_multi, etc.)

QUESTIONS

* Is there a value to separating out the constructor to CHI->new, and putting everything else in CHI::Driver, other than that it is vaguely DBI-like?
* What should set() return? The value? Success flag? Cache::Cache doesn't seem to specify.
* Should we auto-remove items after a miss, like Cache::Cache? Or is this silly b/c it will probably be followed with a set?
* Should namespace default to caller package?
* What happens if a reference is passed as a key? Stringify reference, or reject, or serialize automatically to a key?
* Should get_namespace() always/sometimes/never report empty namespaces - i.e. namespaces that have been created but not populated, or namespaces that have been cleared?
