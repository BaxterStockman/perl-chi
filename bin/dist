#!/usr/bin/perl
#
# Make a distribution
#
use Cwd qw(realpath);
use Date::Format;
use File::Basename;
use File::Slurp;
use IPC::System::Simple qw(run);
use warnings;
use strict;

my $root = dirname( dirname( realpath($0) ) );
my $output;

chomp( my $chi_version = read_file("$root/VERSION") );
die "could not get CHI version" unless $chi_version =~ /\d\.\d/;

# Check that all versions match
my $chi_pm_version = `perl -I$root/lib -MCHI -e 'print \$CHI::VERSION'`;
die
  "versions in VERSION ($chi_version) and CHI.pm ($chi_pm_version) do not match"
  unless $chi_version eq $chi_pm_version;

my @changes = read_file("$root/Changes");
my $changes_version_line = $changes[2];
my ($changes_version, $changes_date) = ($changes_version_line =~ /(\d\.\d+)\s+([A-Z][a-z][a-z] \d\d?, 2\d\d\d)/);
die "Third line in Changes ($changes_version_line) does not look right"
    unless defined($changes_version) && defined($changes_date);
die
  "versions in VERSION ($chi_version) and Changes ($changes_version) do not match"
    unless $chi_version eq $chi_pm_version;

my $today_date = time2str("%b %e, %Y", time());
if ($changes_date ne $today_date) {
    msg("date in Changes ($changes_date) does not match today's date ($today_date), updating");
    $changes[2] = "$changes_version  $today_date\n";
    write_file("$root/Changes", @changes);
    run("cd $root; svn commit -m 'updating date for $changes_version' Changes");
}

# Generate README
msg("Running genreadme");
run("$root/bin/genreadme");

# Run perl Makefile.PL
msg("running perl Makefile.PL");
run("cd $root; perl Makefile.PL");

# Run make manifest
msg("running make manifest");
unlink("$root/MANIFEST");
run("cd $root; make manifest");
unlink("$root/MANIFEST.bak");

# Run bin/tidy
msg("running tidy");
run("$root/bin/tidy");

# Check for svn differences, abort if found
msg("checking svn status");
$output = `cd $root; svn status`;
$output =~ s{\w\s+bin/.*\n}{}mg;
if ( $output =~ /\S/ ) {
    msg("svn status returned output:\n$output");
    exit;
}

# Run bin/critic, abort if any violations
msg("running critic");
$output = `$root/bin/critic`;
print $output;
if ( $output =~ /\*\*/ ) {
    msg("critic returned violations");
    exit;
}

# Run external tests, abort (and print output) if we don't see "All tests passed"
msg("running chitest");
$output = `$root/bin/chitest --external`;
if ( $output !~ /All tests successful/ || $output !~ /Files=\d\d/ ) {
    msg("chitest failed:\n$output");
    exit;
}

# Run "make dist"
msg("running make dist");
run("cd $root; make dist");

# Move tarballs to dist/
msg("moving tarballs to dist/");
run("cd $root; mv *.tar.gz dist");

# change CHI-latest link
msg("linking CHI-latest.tar.gz to CHI-$chi_version.tar.gz");
chdir("$root/dist");
unlink("CHI-latest.tar.gz");
symlink( "CHI-$chi_version.tar.gz", "CHI-latest.tar.gz" );

sub msg {
    my ($msg) = @_;
    print "*** $msg\n";
}
